name: PROD - CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    environment:
      name: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint isort
          pip install -r requirements.txt

      - name: Install project
        run: |
          pip install -e .

      - name: Run Pylint
        run: |
          pylint --disable=C0301,C0302,R0801 app

      - name: Run isort
        run: |
          isort app

      - name: Install Prettier
        run: npm install --global prettier

      - name: Run Prettier
        run: |
          prettier --write .

  test:
    needs: [build]

    runs-on: ubuntu-latest

    environment:
      name: prod

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.11]

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint isort
          pip install -r requirements.txt

      - name: Install project
        run: |
          pip install -e .

      - name: Fetch Test Configurations
        env:
          APP_SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}
          SQLITE_DATABASE_URL: ${{ secrets.SQLITE_TEST_DATABASE_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          GITHUB_CLIENT_ID: ${{ secrets.MY_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.MY_GITHUB_CLIENT_SECRET }}
          GITHUB_CALLBACK_URL: ${{ secrets.MY_GITHUB_CALLBACK_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cat <<EOF > config.test.ini
          [APP]
          SECRET_KEY = ${APP_SECRET_KEY}

          [SQLITE]
          DATABASE_URL = ${SQLITE_TEST_DATABASE_URL}

          [GOOGLE]
          CLIENT_ID = ${GOOGLE_CLIENT_ID}
          CLIENT_SECRET = ${GOOGLE_CLIENT_SECRET}
          CALLBACK_URL = ${GOOGLE_CALLBACK_URL}
          AUTHORIZE_URL = https://accounts.google.com/o/oauth2/v2/auth
          TOKEN_URL = https://oauth2.googleapis.com/token
          USER_URL = https://www.googleapis.com/oauth2/v3/userinfo
          SCOPES_PROFILE = https://www.googleapis.com/auth/userinfo.profile
          SCOPES_EMAIL = https://www.googleapis.com/auth/userinfo.email

          [GITHUB]
          CLIENT_ID = ${MY_GITHUB_CLIENT_ID}
          CLIENT_SECRET = ${MY_GITHUB_CLIENT_SECRET}
          CALLBACK_URL = ${MY_GITHUB_CALLBACK_URL}
          AUTHORIZE_URL = https://github.com/login/oauth/authorize
          TOKEN_URL = https://github.com/login/oauth/access_token
          USER_URL = https://api.github.com/user

          [OPENAI]
          API_KEY = ${OPENAI_API_KEY}
          EOF

      - name: Test with Flask-Unittest
        run: |
          cd $GITHUB_WORKSPACE 
          python test.py

  deploy:
    needs: [test]

    runs-on: ubuntu-latest

    environment:
      name: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Fetch Prod Configurations
        env:
          APP_SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}
          SQLITE_DATABASE_URL: ${{ secrets.SQLITE_DATABASE_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          GITHUB_CLIENT_ID: ${{ secrets.MY_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.MY_GITHUB_CLIENT_SECRET }}
          GITHUB_CALLBACK_URL: ${{ secrets.MY_GITHUB_CALLBACK_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cat <<EOF > config.prod.ini
          [APP]
          SECRET_KEY = ${APP_SECRET_KEY}

          [SQLITE]
          DATABASE_URL = ${SQLITE_DATABASE_URL}

          [GOOGLE]
          CLIENT_ID = ${GOOGLE_CLIENT_ID}
          CLIENT_SECRET = ${GOOGLE_CLIENT_SECRET}
          CALLBACK_URL = ${GOOGLE_CALLBACK_URL}
          AUTHORIZE_URL = https://accounts.google.com/o/oauth2/v2/auth
          TOKEN_URL = https://oauth2.googleapis.com/token
          USER_URL = https://www.googleapis.com/oauth2/v3/userinfo
          SCOPES_PROFILE = https://www.googleapis.com/auth/userinfo.profile
          SCOPES_EMAIL = https://www.googleapis.com/auth/userinfo.email

          [GITHUB]
          CLIENT_ID = ${MY_GITHUB_CLIENT_ID}
          CLIENT_SECRET = ${MY_GITHUB_CLIENT_SECRET}
          CALLBACK_URL = ${MY_GITHUB_CALLBACK_URL}
          AUTHORIZE_URL = https://github.com/login/oauth/authorize
          TOKEN_URL = https://github.com/login/oauth/access_token
          USER_URL = https://api.github.com/user

          [OPENAI]
          API_KEY = ${OPENAI_API_KEY}
          EOF

      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.2.0

      - name: Build and push Docker images
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cits5505_group-project:lastest

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_TOKEN }}
          script_stop: true
          script: |
            source /etc/profile
            cd /home/workspace/cits5505
            sh run.sh
